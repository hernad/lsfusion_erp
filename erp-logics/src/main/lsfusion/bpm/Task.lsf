REQUIRE Utils, Country, Authentication, Dashboard, StockSkuDocument;
NAMESPACE Task;

disableEvents = DATA LOCAL BOOLEAN ();

GROUP Task 'Tasks';

// Task module
CLASS Type 'Type of task';
TABLE type (Type);
dataName = DATA STRING [100] (Type);
name (Type t) = OVERRIDE dataName (t), staticCaption (t) CHARWIDTH 15;

FORM type 'Task Type'
     OBJECTS t = Type PANEL
     PROPERTIES (t) name
     EDIT Type OBJECT t
;

FORM types 'Types of tasks'
    OBJECTS t = Type
    PROPERTIES (t) READONLY name
    PROPERTIES (t) NEWSESSION EDIT
    LIST Type OBJECT t
;

// The task

CLASS ABSTRACT Task 'Task';
TABLE task (Task) FULL;

backgroundFill = RGB (255, 255, 224);

// document = ABSTRACT Document (Task) MATERIALIZED;

type = ABSTRACT Type (Task) MATERIALIZED;
nameType 'Task type' (Task t) = name (type (t)) CHARWIDTH 20;

dateTimeStart 'Start date / time' = ABSTRACT DATETIME (Task) MATERIALIZED CHARWIDTH 10;
description 'Description' = ABSTRACT ISTRING [1000] (Task) MATERIALIZED CHARWIDTH 30;
run 'Run' ABSTRACT (Task);
endOfTheDay 'Until the end of the day' = ABSTRACT BOOLEAN (Task) MATERIALIZED;
countDays 'Number of days' = ABSTRACT INTEGER (Task) MATERIALIZED CHARWIDTH 3 NOFLEX;
id 'ID' = ABSTRACT STRING [30] (Task) MATERIALIZED;

dateStart 'Start date' (Task t) = DATE (dateTimeStart (t));
deadlineDate (Task t) = jumpWorkdays (defaultCountry (), dateStart (t), countDays (t));
deadline 'Execute before' (t) = dateTimeToDateTime (deadlineDate (t), IF endOfTheDay (t) THEN 23:59 ELSE TIME (dateTimeStart (t))) CHARWIDTH 10;
overdeadline 'Overdue' (t) = deadline (t) <currentDateTime ();

assigned = ABSTRACT BOOLEAN (CustomUser, Task) MATERIALIZED;
skip = ABSTRACT BOOLEAN (CustomUser, Task);

TABLE customUserTask (CustomUser, Task);
in (CustomUser u, Task t) = assigned (u, t) AND NOT skip (u, t) MATERIALIZED;



backgroundDescription = ABSTRACT COLOR (Task);

type = DATA LOCAL Type ();
nameType 'Task type' = name (type ()) CHARWIDTH 20;

FORM tasks 'Tasks'
    PROPERTIES () nameType
            
    OBJECTS dd = (df = DATE, dt = DATE) PANEL
    PROPERTIES valDf = VALUE (df), valDt = VALUE (dt)

    OBJECTS t = Task GRID
    PROPERTIES (t) READONLY nameType, dateTimeStart, countDays, deadline, description BACKGROUND backgroundDescription (t)
    PROPERTIES (t) run TOOLBAR
    ORDERS deadline (t) DESC
    FILTERS in (currentUser (), t),
            type (t) == type () OR NOT type ()

    FILTERGROUP dateCur
        FILTER 'For the period' dateStart (t)> = df AND dateStart (t) <= dt 'F10' DEFAULT
    
    FILTERGROUP overDeadLine
        FILTER 'Overdue' overdeadline (t) 'F9'
;

DESIGN tasks {
    NEW params FIRST {
        caption = 'Filters';
        type = CONTAINERH;
        MOVE PROPERTY (valDf) {caption = 'Date since';}
        MOVE PROPERTY (valDt) {caption = 'Date till';}
        MOVE PROPERTY (nameType ());
    }
    BOX (t) {
        PROPERTY (run (t)) {
            valueHeight = 32;
            fontStyle = 'bold';
            fontSize = 18;
            // alignment = STRETCH;
        }
        PROPERTY (countDays (t)) {charWidth = 5;}
    }
}


// ----------------- Logging changes in tasks ------------------- //

CLASS TaskLog 'Writing the task log';
TABLE taskLog (TaskLog);

type = DATA Type (TaskLog);
nameType 'Task type' (TaskLog l) = name (type (l));

startDateTime 'Start Date / Time' = DATA DATETIME (TaskLog);
deadlineDateTime 'Execute before' = DATA DATETIME (TaskLog);
description 'Description' = DATA STRING [1000] (TaskLog);

userName 'Username' = DATA STRING [100] (TaskLog);
dateTimeSession 'Runtime' = DATA DATETIME (TaskLog);
dateSession 'Execution date' (TaskLog l) = DATE (dateTimeSession (l));
timeSession 'Runtime' (TaskLog l) = TIME (dateTimeSession (l));

diffDates (DATETIME dateFrom, DATETIME dateTo) = [FORMULA INTEGER PG 'SELECT EXTRACT (epoch FROM (($ 1) - ($ 2)))'] (dateFrom AS DATETIME, dateTo AS DATETIME);
initialTimeS 'Estimated execution time, c' (TaskLog l) = diffDates (deadlineDateTime (l), startDateTime (l));
realTimeS 'Real time of execution, c' (TaskLog l) = diffDates (dateTimeSession (l), startDateTime (l));
initialTimeH 'Expected execution time, h' (TaskLog l) = initialTimeS (l) / 3600.0;
realTimeH 'Real time of execution, h' (TaskLog l) = realTimeS (l) / 3600.0;

WHEN DROPPED (Task o IS Task) DO {
    NEW t = TaskLog {
        type (t) <- PREV (type (o));
        startDateTime (t) <- PREV (dateTimeStart (o));
        deadlineDateTime (t) <- PREV (deadline (o));
        description (t) <- PREV (description (o));
        userName (t) <- name (currentUser ());
        dateTimeSession (t) <- currentDateTime ();
    }
}

FORM taskLogs 'Task execution log'
     PROPERTIES () nameType

     OBJECTS t = TaskLog
     PROPERTIES (t) READONLY nameType, startDateTime, deadlineDateTime, description, userName, dateSession, timeSession, initialTimeS, realTimeS, initialTimeH, realTimeH
     FILTERS type (t) == type () OR NOT type ()
;
DESIGN taskLogs {
     NEW filter {
         caption = 'Filters';
         MOVE PROPERTY (nameType ());
     }
     MOVE BOX (t);
     MOVE TOOLBARBOX;
}

NAVIGATOR {
     logs {
         NEW taskLogs;
     }
}

NAVIGATOR {
     dashboardNavigator {
         NEW FOLDER taskDashboard 'BPM' {
             NEW tasks;
         }
     }
}

// ------------- Notifications ------------ //

skipNotification = ABSTRACT VALUE BOOLEAN (Task);

FORM notification
    OBJECTS r = RICHTEXT PANEL
    PROPERTIES (r) notification = VALUE
;

notificationStart = ABSTRACT RICHTEXT (Task);
subjectNotificationStart = ABSTRACT STRING [100] (Task);

hasAttachment = ABSTRACT BOOLEAN (Task);
attachment = ABSTRACT FILE (Task);
attachmentName = ABSTRACT STRING [100] (Task);

generateAttachment (Task t) ABSTRACT LIST (Task);

emailTask ​​'Mail for sending task notifications' = DATA STRING [300] () CHARWIDTH 30 IN documentPrm;
EXTEND FORM options
    PROPERTIES () emailTask
;
DESIGN options {
    commons {
        MOVE PROPERTY (emailTask ​​());
    }
}

emailNotificationStart 'Submit' (CustomUser u, Task t) {
    
    LOCAL bodyFile = FILE ();
    PRINT notification OBJECTS r = notificationStart (t) HTML TO bodyFile;
    IF hasAttachment (t) THEN {
        generateAttachment (t);
        EMAIL
            FROM emailTask ​​()
            SUBJECT (OVERRIDE subjectNotificationStart (t), 'Task notification from' + dateStart (t))
            TO email (u)
            BODY bodyFile ()
            ATTACH attachment (t) NAME attachmentName (t);
    } ELSE
        EMAIL
            FROM emailTask ​​()
            SUBJECT (OVERRIDE subjectNotificationStart (t), 'Task notification from' + dateStart (t))
            TO email (u)
            BODY bodyFile ();
    
}

WHEN SET (Task t IS Task) AND notificationStart (t) AND NOT (disableEvents () OR skipNotification (t)) AND emailTask ​​() DO {
    FOR in (CustomUser u, t) AND email (u) DO {
        emailNotificationStart (u, t);
    }
}

DESIGN options {
    pane {
        NEW task {
            caption = 'Tasks';
            NEW taskTop {
                MOVE PROPERTY (emailTask ​​());
            }
            NEW taskNotifications {
                fill = 1;
                type = TABBED;
                caption = 'Task Notifications';
            }
        }
    }
}

META defineTask (NS, cls, taskName, taskCaption, taskProp, dateTimeProp)

    // Task on request
    GROUP Task ### taskName taskCaption;
    CLASS Task ### taskName taskCaption: Task;
    
    EXTEND CLASS Task.Type {
        taskName taskCaption
    }

    task ### taskName = AGGR ### task ### taskName WHERE taskProp (### cls cls) MATERIALIZED INDEXED;
        type (Task ### taskName t) + = Task.Type.taskName IF t IS Task ### taskName;
    
    // document (Task ### taskName t) + = cls (t);
    description (Task ### taskName t) + = description (cls (t));
    dateTimeStart (Task ### taskName t) + = dateTimeProp (cls (t)); // dateTime ### taskName (cls (t));


    @defineTaskPeriod (NS, taskName, taskCaption);
    overCountDays = ABSTRACT INTEGER (Task ### taskName);
    countDays (Task ### taskName t) + = OVERRIDE overCountDays (t), countDays ### Task ### taskName ## Date () IF t IS Task ### taskName;
    
    // Assign tasks to roles
    taskName taskCaption = DATA BOOLEAN (UserRole) IN Task;
    EXTEND FORM securityPolicy
        PROPERTIES (ur) NS ### taskName = taskName
    ;
    DESIGN securityPolicy {
        OBJECTS {
            roleApplicationSettings {
                MOVE GROUP (Task, ur);
            }
        }
    }
    
    has ### taskName (CustomUser user) = GROUP SUM 1 IF has (user AS CustomUser, UserRole role) AND taskName (role) MATERIALIZED;
    assigned (CustomUser u, Task ### taskName t) + = has ### taskName (u) AND hasAccess ### taskName (u, cls (t));
    
    @defineAppTaskNotification (NS, cls, taskName, taskCaption);
    
END
META defineTask (NS, cls, taskName, taskCaption, taskProp)
    @defineTask (NS, cls, taskName, taskCaption, taskProp, dateTime);
END

META defineTaskPeriod(NS, taskName, caption)
    @definePeriod(NS, Task###taskName, caption);
END

META definePeriod (NS, name, caption)
    countDays ### name ## Date 'Number of days for' ### caption = DATA INTEGER () IN name;
    
    EXTEND FORM options
        PROPERTIES () NS ## CountDaysD ### name = countDays ### name ## Date
    ;
    DESIGN options {
        taskTop {
            MOVE PROPERTY (NS ## CountDaysD ### name);
        }
    }
    
END
META defineAppTaskNotification (NS, cls, taskName, taskCaption)

    notificationStart ### taskName taskCaption = DATA RICHTEXT ();
    subjectNotificationStart ### taskName taskCaption = DATA STRING [100] ();
    
    EXTEND FORM options
        PROPERTIES NS ### notificationStart ### taskName = notificationStart ### taskName (), NS ### subjectNotificationStart ### taskName = subjectNotificationStart ### taskName ()
    ;
    
    DESIGN options {
        taskNotifications {
            NEW NS ## Notification ### taskName {
                caption = taskCaption;
                fill = 1;
                MOVE PROPERTY (NS ### subjectNotificationStart ### taskName) {caption = 'Title'; };
                MOVE PROPERTY (NS ### notificationStart ### taskName) {caption = 'Text'; fill = 1; panelCaptionAbove = TRUE; }
            }
        }
    }
    
    notificationStart (Task ### taskName t) + = RICHTEXT (notificationStart ### taskName () + (CONCAT '', '<br>' + 'Number of days to complete' + '<b>' + countDays (t) + '</b>',
                                                                '<br>' + 'Deadline' + '<b>' + toDateDDMMYY (deadline (t)) + '</b>',
                                                                '<br>' + '<b>' + description (t) + '</b>'))
                                                            IF t IS Task ### taskName AND notificationStart ### taskName ();
    subjectNotificationStart (Task ### taskName t) + = STRING [100] (subjectNotificationStart ### taskName ()) IF t IS Task ### taskName;

END

// printnotification 'Print' (Task t) {PRINT notification OBJECTS r = notificationStart (t);}
//
// EXTEND FORM tasks
// PROPERTIES (t) READONLY notificationStart, subjectNotificationStart
// PROPERTIES printnotification (t) TOOLBAR
//;
