MODULE CreditNote;

REQUIRE Shipment, Invoice, Item;

//----------------------------------------------- Act discrepancies ------------------------------------------------- - //

DESIGN options {
    pane {
        NEW creditNotes {
            type = CONTAINERV;
            caption = 'Act of discrepancy';
        }
    }
}

META defineCreditNote (sign, legalEntityProp, stockProp, supplierFilter, customerFilter, NS) // contact, contactCaption)

    CLASS ABSTRACT CreditNote 'Act of discrepancy' ### sign;
    CLASS ABSTRACT CreditNoteDetail 'Discrepancy statement line' ### sign;

    CLASS UserCreditNote 'Statement of discrepancy (users)' ### sign: CreditNote;
    CLASS UserCreditNoteDetail 'Discrepancy certificate line (user)' ### sign: CreditNoteDetail;

    GROUP creditNote 'Discrepancy report information': base;
    
    @defineExternalizable (userCreditNote, STRING [100]);
    @defineExternalizable (userCreditNoteDetail, STRING [100]);

    @defineDocumentInterface (creditNote);
    @deriveDocumentHeaderTimePrefix (UserCreditNote,);

    @defineDocumentInterfaceNumber (creditNote);

    @defineNumeratedDefault (UserCreditNote, 'Acts of discrepancies' ### sign, 'AP', NS);

    @defineDocumentInterfaceLegalEntity (creditNote, supplier, 'Supplier');
    @defineDocumentInterfaceLegalEntity (creditNote, customer, 'Customer');

    @defineDocumentInterfaceDataStock (creditNote, stock, 'Supplier's warehouse', supplier);
    @defineDocumentInterfaceDataStock (creditNote, stock, 'Buyer's warehouse', customer);
    
    CONSTRAINT supplier (UserCreditNote userCreditNote) AND supplierStock (userCreditNote) AND NOT
               in (supplier (userCreditNote), supplierStock (userCreditNote))
        CHECKED BY supplierStock [UserCreditNote]
            MESSAGE 'The supplier and the supplier's warehouse for the discrepancy report have no connection';
    CONSTRAINT customer (UserCreditNote userCreditNote) AND customerStock (userCreditNote) AND NOT
               in (customer (userCreditNote), customerStock (userCreditNote))
        CHECKED BY customerStock [UserCreditNote]
            MESSAGE 'The buyer and the buyer's warehouse have no connection for the discrepancy report';

    @defineDocumentInterfacePosted (creditNote);
    @defineDocumentInterfaceClosed (creditNote);
    @defineDocumentClosedConstraint (UserCreditNote);
    @defineDocumentInterfaceDescription (creditNote, 'Act of discrepancy' ### sign);

    @defineDocumentInterfaceCurrency (creditNote);
    @deriveDocumentCurrency (userCreditNote, stockProp ### stock);

    @defineDocumentInterfaceContract (CreditNote, contractSku, supplier, customer,
                                     'The organization (supplier) of the discrepancy act agreement does not correspond to the organization (supplier) of the discrepancy act',
                                     'The organization (buyer) of the discrepancy act agreement does not correspond to the organization (buyer) of the discrepancy act',
                                     'act of discrepancy' ### sign, NS);

    @defineDocumentInterfaceDetailSku (creditNote, sku);
    INDEX sku (CreditNoteDetail d), customerStock (d);

    @defineDocumentInterfaceDetailQuantity (creditNote);
    
    price 'Price' = ABSTRACT NUMERIC [16,4] (CreditNoteDetail) MATERIALIZED;
    price 'Price' = DATA NUMERIC [16,4] (UserCreditNoteDetail);
    price (UserCreditNoteDetail creditNoteDetail) + = price (creditNoteDetail);

    @defineDocumentInterfaceDetailDataSum (creditNote);
    @deriveDocumentDetailSum (userCreditNote, quantity);

    @defineDocumentInterfaceDetailVAT (creditNote, country ### stockProp ### stock); // derive see below in "Act and waybill relationship"
    @defineDocumentInterfaceDetailVATDataSumCustom (creditNoteDetail, invoice);

    @defineDocumentInterfaceHeaderQuantity (creditNote);
    @defineDocumentHeaderSkuQuantity (creditNote, sku);
    @defineDocumentInterfaceHeaderSum (creditNote);
    @defineDocumentInterfaceHeaderVATSum (creditNote, creditNoteDetail, invoice);
    
    @defineDocumentInterfaceHeaderItemSum (creditNote, VAT, VAT); // - VAT amount of the supplier (broken down by container, product ...)
    @defineDocumentInterfaceHeaderItemSum (creditNote,,); // - the amount of the supplier (with a breakdown by container, product ...)
    @defineDocumentInterfaceHeaderItemSum (creditNote, invoice, invoice); // - the amount of the supplier with VAT (with a breakdown by container, product ...)

    @defineDocumentInterfaceHeaderItemSumDouble (creditNote, range, VAT, VAT, VAT); // - the amount of VAT of the supplier (with a breakdown by container, product ...) by document and by scale
    @defineDocumentInterfaceHeaderItemSumDouble (creditNote, range,,,, VAT); // amount excluding VAT of the supplier (with a breakdown by container, product ...) by document and by scale
    @defineDocumentInterfaceHeaderItemSumDouble (creditNote, range, invoice, invoice,, VAT); // VAT amount (with a breakdown by container, product ...) by document and by scale

    @defineAddDetailDialogSkuStock (userCreditNote, sku, stockProp ### stock, dialogSku);
    @defineAddDetailDialogBarcode (userCreditNote, sku);
        
    @defineMovementSku (creditNoteDetail, stockProp ### stock); // - show the movement of goods by pressing the right key
    @defineMovementSku (userCreditNoteDetail, stockProp ### stock); // - show the movement of goods by pressing the right key
    @defineBalancesSku (creditNoteDetail); // - show the rest of the product by pressing the right key
    @defineBalancesSku (userCreditNoteDetail); // - show the rest of the product by pressing the right key
    @defineBarcodeSku (creditNoteDetail); // - show all barcodes for the product by pressing the right key
    @defineBarcodeSku (userCreditNoteDetail); // - show all barcodes for the product by pressing the right key
    @defineInfoSku (creditNoteDetail); // - show product information by pressing the right key
    @defineInfoSku (userCreditNoteDetail); // - show product information by pressing the right key
    @defineDocumentDialogSupplierCustomerStock (userCreditNote, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity (userCreditNote, supplierFilter, customerFilter);
    
    @defineDocumentInterfaceDetailQuantityCustomPrefix (creditNoteDetail, document, 'on invoice');
    @defineDocumentInterfaceDetailDataSumPrefix (creditNote, document, 'on invoice');
    @defineDocumentInterfaceDetailDataSumPrefix (creditNote, documentVAT, 'VAT invoice');
    @defineDocumentInterfaceDetailDataSumPrefix (creditNote, documentInvoice, 'VAT included on invoice');
    
    @defineDocumentInterfaceDetailQuantityCustomPrefix (creditNoteDetail, shipment, 'in fact');
    @defineDocumentInterfaceDetailDataSumPrefix (creditNote, shipment, 'after the fact');
    @defineDocumentInterfaceDetailDataSumPrefix (creditNote, shipmentVAT, 'VAT ex post');
    @defineDocumentInterfaceDetailDataSumPrefix (creditNote, shipmentInvoice, 'ex post VAT');
    
// --------------------------- Forms -------------------- ------------- //
    
    background = ABSTRACT CASE COLOR (CreditNoteDetail);
    
    FORM userCreditNote 'Statement of discrepancies' ### sign
        OBJECTS c = UserCreditNote PANEL
        PROPERTIES (c) isPosted [CreditNote], nameNumerator, number, series, date, time,
                       nameSupplier ON CHANGE changeSupplier ### supplierFilter (c),
                       nameCustomer ON CHANGE changeCustomer ### customerFilter (c),
                       nameSupplierStock ON CHANGE changeSupplierStock ### supplierFilter (c),
                       nameCustomerStock ON CHANGE changeCustomerStock ### customerFilter (c),
                       nameCurrency, seriesNumberContractSku, note,
                       countUserCreditNoteDetail, quantityUserCreditNoteDetail, sumUserCreditNoteDetail,
                       VATSumUserCreditNoteDetail, invoiceSumUserCreditNoteDetail

        OBJECTS d = UserCreditNoteDetail
        PROPERTIES (d) BACKGROUND background (d) index, idBarcodeSku, idSku SHOWIF showIDs (), nameSku, shortNameUOMSku,
                       quantity, price, sum,
                       numberVAT, valueVAT, VATSum, invoiceSum,
                       name ### stockProp ## Stock, NEW, deletecd = DELETE GRID

        PROPERTIES (c) DRAW d addDetailDialogSkuStockUserCreditNoteDetail,
                               addDetailInputBarcodeUserCreditNoteDetail, deleteUserCreditNoteDetail
        FILTERS userCreditNote (d) == c

        EVENTS
            ON OK prePost (c)

        EDIT UserCreditNote OBJECT c
    ;

    DESIGN userCreditNote {
        BOX {
            size = (1024, 768);
            NEW mainTabbed {
                type = TABBED;
                fill = 1;
                NEW documentBox {
                    type = CONTAINERV;
                    fill = 1;
                    caption = 'Act of discrepancies';
                    NEW headerBox {
                        type = CONTAINERH;
        
                        NEW headerRow1 {
        
                            MOVE GROUP (documentHeader, c) {
                                type = CONTAINERV;
                                NEW first {
                                    type = CONTAINERH;
                                    MOVE PROPERTY (isPosted (c));
                                }
                                NEW second {
                                    type = CONTAINERH;
                                    MOVE PROPERTY (nameNumerator (c));
                                    MOVE PROPERTY (number (c));
                                    MOVE PROPERTY (series (c));
                                    MOVE PROPERTY (date (c));
                                    MOVE PROPERTY (time (c));
                                }
                            }
                            NEW headerRow11 {
                                type = CONTAINERH;
                                NEW headerRow111 {
                                    caption = 'Supplier';
                                    type = CONTAINERH;
                                    MOVE PROPERTY (nameSupplier (c));
                                    MOVE PROPERTY (nameSupplierStock (c));
        
                                }
                                NEW headerRow112 {
                                    caption = 'Customer';
                                    type = CONTAINERH;
                                    MOVE PROPERTY (nameCustomer (c));
                                    MOVE PROPERTY (nameCustomerStock (c));
                                }
        
                            }
                            MOVE GROUP (documentPrm, c);
                            NEW headerRow12 {
                                type = CONTAINERH;
                            }
                        }
        
                        MOVE GROUP (documentSum, c) {
                            columns = 1;
                        }
                    }
                
                    NEW specificationBox {
                        fill = 1;
                        type = TABBED;
                        MOVE BOX (d) {
                            caption = 'Specification';
                        }
                    }
                }
            }
            MOVE TOOLBARBOX;
            PROPERTY (formOk ()) {
                caption = 'Post';
            }
            PROPERTY (sumUserCreditNoteDetail (c)) {charWidth = 13;}
            PROPERTY (VATSumUserCreditNoteDetail (c)) {charWidth = 13;}
            PROPERTY (invoiceSumUserCreditNoteDetail (c)) {charWidth = 13;}
        }
    }
    
    
    @defineDocumentSkuStockPriceListTypeSystemLedger (userCreditNote, stockProp);
    @extendFormDocumentSkuStock (userCreditNote, userCreditNote, c, legalEntityProp, stockProp);
    
    isUserOpened (UserCreditNote c) = isOpened [CreditNote] (c) AND is (c);
        
    FORM creditNotes 'Acts of discrepancies'
        OBJECTS c = CreditNote LAST
        PROPERTIES (c) READONLYIF isReadonly () isClosed, isPosted, number, series, date, time,
                       nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock,
                       nameCurrency, seriesNumberContractSku
        PROPERTIES (c) READONLY countCreditNoteDetail, quantityCreditNoteDetail, sumCreditNoteDetail,
                       VATSumCreditNoteDetail, invoiceSumCreditNoteDetail
        PROPERTIES (c) READONLYIF isReadonly () note
        PROPERTIES (c) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer,
                                            postedNameUser, postedTime, postedHostnameComputer

        PROPERTIES (c) NEWSESSION NEW [UserCreditNote], editC = EDIT SHOWIF isOpened (c), deletec = DELETE SHOWIF isUserOpened (c)
        PROPERTIES (c) close [UserCreditNote] SHOWIF isOpened [UserCreditNote] (c), open SHOWIF isClosed [UserCreditNote] (c)

        OBJECTS d = CreditNoteDetail
        PROPERTIES (d) READONLY BACKGROUND background (d) index, idBarcodeSku, idSku SHOWIF showIDs (), nameSku, shortNameUOMSku,
                                quantity, price, sum, numberVAT, valueVAT,
                                 VATSum, invoiceSum, name ### stockProp ## Stock
        FILTERS creditNote (d) == c

        LIST CreditNote OBJECT c
    ;

    DESIGN creditNotes 'Acts of discrepancies' ### sign {
        NEW documentContainer BEFORE TOOLBARBOX {
            type = SPLITV;
            fill = 1;

            MOVE BOX (c) {flex = 2.0; }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE BOX (d) {
                    fill = 1;
                    caption = 'Specification';
                }
                NEW documentHistory {
                    caption = 'History';

                    MOVE GROUP (created, c);
                    MOVE GROUP (posted, c);
                }
                NEW printTab {
                    caption = 'Printable forms';
                    NEW printContainer {
                        caption = 'Print';
                        type = CONTAINERV;
                    }
                }
                NEW actionContainer {
                    caption = 'Actions';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Caption Based';
                        type = CONTAINERV;

// NEW PROPERTY (copyInvoice) {caption = 'Invoice (sale)';}
                    }
                    NEW machineryContainer {
                        caption = 'Loading';
                        type = CONTAINERV;
                    }
                }
            }
        }
    }
    @extendFormEditable (creditNotes);
    @defineFilterIsOpened (creditNote, creditNotes, c);
    edit (UserCreditNoteDetail d) + {DIALOG userCreditNote OBJECTS c = userCreditNote (d), d = d DOCKED; }
    
    show 'View' ABSTRACT LIST (CreditNoteDetail) TOOLBAR;
    show (UserCreditNoteDetail d) {
        NEWSESSION {
            SHOW userCreditNote OBJECTS c = userCreditNote (d), d = d DOCKED READONLY;
        }
    }
    show (UserCreditNoteDetail d) + {show (d); }
    
    show 'View' (UserCreditNote i) {
        NEWSESSION {
            SHOW userCreditNote OBJECTS c = i DOCKED READONLY;
        }
        
    } TOOLBAR;
        
    showToShow (UserCreditNote i) = is (i); // AND NOT overShowEdit (i);
    EXTEND FORM creditNotes
        PROPERTIES show (c) SHOWIF showToShow (c) BEFORE editC
    
    ;
    
// - Connection of the act and the waybill
    invoiceDetail = ABSTRACT InvoiceDetail (CreditNoteDetail) MATERIALIZED INDEXED;
    invoiceDetail = DATA InvoiceDetail (UserCreditNoteDetail);
    invoiceDetail (UserCreditNoteDetail creditNoteDetail) + = invoiceDetail (creditNoteDetail);

    CONSTRAINT supplier [CreditNoteDetail] (UserCreditNoteDetail detail)! = Supplier (invoiceDetail (detail)) OR
               customer (detail)! = customer (invoiceDetail (detail)) OR
               sku (detail)! = sku (invoiceDetail (detail))
        CHECKED BY invoiceDetail [UserCreditNoteDetail]
            MESSAGE 'The supplier, the buyer and the goods in the invoice and the act of discrepancy must match each other';

    descriptionIndexInvoice 'Invoice' (UserCreditNoteDetail userCreditNoteDetail) = descriptionIndex (invoiceDetail (userCreditNoteDetail));
    descriptionIndexInvoiceInvoice 'Invoice' (CreditNoteDetail creditNoteDetail) = descriptionIndex (invoiceDetail (creditNoteDetail));

    quantity (invoice, creditNote) = GROUP SUM quantity (CreditNoteDetail creditNoteDetail) BY invoice (invoiceDetail (creditNoteDetail)), creditNote (creditNoteDetail);
    invoices 'Invoices' (CreditNote creditNote) = GROUP
                                                    CONCAT STRING [255] (description (Invoice invoice)) IF quantity (invoice, creditNote), ','
                                                    ORDER invoice IN invoice CHARWIDTH 30;

    EXTEND FORM userCreditNote
        PROPERTIES (c) READONLY invoices
        PROPERTIES (d) descriptionIndexInvoice BEFORE deletecd
    ;
    DESIGN userCreditNote {headerRow12 {MOVE GROUP (invoice, c) {type = CONTAINERH;}}}


    EXTEND FORM creditNotes
        PROPERTIES (c) READONLY invoices
        PROPERTIES (d) READONLY descriptionIndexInvoiceInvoice
    ;
    // Write the values ​​from the invoice
    quantity (UserCreditNoteDetail detail) <- toShip (invoiceDetail (detail))
        WHEN CHANGED (invoiceDetail (detail));

    price (UserCreditNoteDetail detail) <- price (invoiceDetail (detail))
        WHEN CHANGED (invoiceDetail (detail));

    VAT (UserCreditNoteDetail detail) <- VAT (invoiceDetail (detail))
        WHEN CHANGED (invoiceDetail (detail));

    valueVAT (UserCreditNoteDetail detail) <- valueVAT (invoiceDetail (detail))
        WHEN CHANGED (invoiceDetail (detail));

    VATSum (UserCreditNoteDetail detail) <- round ((sum (detail) *
        valueVAT (detail) / 100), currency (invoiceDetail (detail)))
        WHEN CHANGED (sum (detail)) OR CHANGED (VAT (detail)) OR CHANGED (currency (detail));
    @deriveDocumentDetailVATPrefixSum (userCreditNote, invoice);

// - agricultural object
    caseToShip = ABSTRACT CASE NUMERIC [16.5] (InvoiceDetail);
    caseToShip (InvoiceDetail detail) + = WHEN sku (detail) IS Item THEN toShip (detail);
        
    @defineDocumentInterfaceProperty (invoice, createCreditNote, 'Create act of discrepancy');
    
    skipCreateCreditNote = ABSTRACT BOOLEAN (InvoiceDetail) MATERIALIZED;
    
    needToCreditNote (InvoiceDetail invoiceDetail) = createCreditNote (invoiceDetail) AND
        caseToShip (invoiceDetail)
        AND isNotCharge (sku (invoiceDetail)) AND NOT skipCreateCreditNote (invoiceDetail) MATERIALIZED;

    overCopy (UserInvoice s, UserInvoice d) + {
        createCreditNote (d) <- createCreditNote (s);
    }
    
needToCreditNote (invoice) = GROUP SUM 1 IF needToCreditNote (InvoiceDetail invoiceDetail) BY invoice (invoiceDetail) MATERIALIZED;

    EXTEND FORM userInvoice PROPERTIES (i) createCreditNote;
    DESIGN userInvoice {
        headerCreateDocuments {
            NEW headerCreateCreditNote {
                caption = 'Act of discrepancy';
                MOVE PROPERTY (createCreditNote (i));
            }
        }
    }

    CLASS InvoiceCreditNote 'Invoice-based discrepancy statement': CreditNote;
    CLASS InvoiceCreditNoteDetail 'Invoice-based discrepancy statement line': CreditNoteDetail;

    @defineDocumentTables (invoiceCreditNote);

    @defineDocumentAggregation (invoice, invoiceCreditNote, needToCreditNote);
    creditNote (InvoiceCreditNoteDetail detail) + = invoiceCreditNote (detail);

    index (InvoiceCreditNoteDetail detail) + = index (detail);
    
    overDate = ABSTRACT DATE (InvoiceCreditNote);
    overTime = ABSTRACT TIME (InvoiceCreditNote);
    date (InvoiceCreditNote creditNote) + = OVERRIDE overDate (creditNote), date (creditNote);
    time (InvoiceCreditNote creditNote) + = OVERRIDE overTime (creditNote), time (creditNote);

    @defineDocumentAggregationStockPrefix (invoice, invoiceCreditNote, supplier, 'Supplier's warehouse',,);
    supplierStock (InvoiceCreditNote creditNote) + = supplierStock (creditNote);

    @defineDocumentAggregationStockPrefix (invoice, invoiceCreditNote, customer, 'Buyer's warehouse',,);
    customerStock (InvoiceCreditNote creditNote) + = customerStock (creditNote);

    @defineDocumentAggregationLegalEntityPrefix (invoice, invoiceCreditNote, supplier, 'Supplier',,);
    supplier (InvoiceCreditNote creditNote) + = supplier (creditNote);

    @defineDocumentAggregationLegalEntityPrefix (invoice, invoiceCreditNote, customer, 'Customer',,);
    customer (InvoiceCreditNote creditNote) + = customer (creditNote);
    
    contractSku (InvoiceCreditNote creditNote) + = contractSku (invoice (creditNote));

    @defineDocumentAggregationPosted(invoice, invoiceCreditNote);
    isPosted(InvoiceCreditNote creditNote) += isPosted(creditNote);
    
    @defineDocumentAggregationClosed(invoice, invoiceCreditNote);
    isClosed(InvoiceCreditNote creditNote) += isClosed(creditNote);
    
    number 'Document number' (InvoiceCreditNote invoiceCreditNote) = number (invoice (invoiceCreditNote));
    number (InvoiceCreditNote creditNote) + = number (creditNote);

    series 'Document Series' (InvoiceCreditNote invoiceCreditNote) = series (invoice (invoiceCreditNote));
    series (InvoiceCreditNote creditNote) + = series (creditNote);

    seriesNumber 'Document series / number' (InvoiceCreditNote invoiceCreditNote) = seriesNumber (invoice (invoiceCreditNote));

    noteInvoice 'Note' (InvoiceCreditNote invoiceCreditNote) = note (invoice (invoiceCreditNote));
    note (InvoiceCreditNote creditNote) + = noteInvoice (creditNote);

    currency (InvoiceCreditNote invoiceCreditNote) = currency (invoice (invoiceCreditNote));
    currency (InvoiceCreditNote creditNote) + = currency (creditNote);
    currency (InvoiceCreditNoteDetail invoiceCreditNoteDetail) = currency (invoiceCreditNote (invoiceCreditNoteDetail)) MATERIALIZED;

    @defineDocumentDescription (invoiceCreditNote, InvoiceCreditNoteDetail, 'Invoice-based discrepancy statement' ### sign);
    description (InvoiceCreditNote creditNote) + = description (creditNote);
        
    @defineDocumentAggregationDetailSku (invoice, invoiceCreditNote, sku);
    sku (InvoiceCreditNoteDetail creditNoteDetail) + = sku (creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, toShip, 'Qty'); // ???????? may need to be done through minus
    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, caseToShip, 'Amount');
    
    overQuantity = ABSTRACT NUMERIC [16.5] (InvoiceCreditNoteDetail);
    
    quantity (InvoiceCreditNoteDetail creditNoteDetail) + = OVERRIDE overQuantity (creditNoteDetail), caseToShip (creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, price, 'Price');

    price (InvoiceCreditNoteDetail creditNoteDetail) + = price (creditNoteDetail);

    sum 'Amount' (InvoiceCreditNoteDetail invoiceCreditNoteDetail) = NUMERIC [18,4] (round ((quantity (invoiceCreditNoteDetail) *
        price (invoiceCreditNoteDetail)), currency (invoiceCreditNoteDetail)));

    sum (InvoiceCreditNoteDetail creditNoteDetail) + = sum (creditNoteDetail);

    invoiceDetail (InvoiceCreditNoteDetail creditNoteDetail) + = invoiceDetail (creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, VAT, 'VAT');
    VAT (InvoiceCreditNoteDetail creditNoteDetail) + = VAT (creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, numberVAT, 'VAT, number');
    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, valueVAT, 'VAT,%');
    valueVAT (InvoiceCreditNoteDetail creditNoteDetail) + = valueVAT (creditNoteDetail);

    VATSum 'VAT Amount' (InvoiceCreditNoteDetail invoiceCreditNoteDetail) = NUMERIC [18,4] (round ((sum (invoiceCreditNoteDetail) *
    valueVAT (invoiceCreditNoteDetail) / 100), currency (invoiceCreditNoteDetail)));

    invoiceSum 'Amount with VAT' (InvoiceCreditNoteDetail invoiceCreditNoteDetail) = VATSum (invoiceCreditNoteDetail) (+)
        sum (invoiceCreditNoteDetail);

    VATSum (InvoiceCreditNoteDetail creditNoteDetail) + = VATSum (creditNoteDetail);
    invoiceSum (InvoiceCreditNoteDetail creditNoteDetail) + = invoiceSum (creditNoteDetail);
    
    edit (InvoiceCreditNote c) + {edit (invoice (c)); }
    edit (InvoiceCreditNoteDetail d) + {edit (invoiceDetail (d)); }
    
    overDocumentQuantity = ABSTRACT NUMERIC [16.5] (InvoiceCreditNoteDetail);
    documentQuantity (InvoiceCreditNoteDetail d) + = OVERRIDE overDocumentQuantity (d), quantity (invoiceDetail (d));
    documentSum (InvoiceCreditNoteDetail d) + = sum (invoiceDetail (d));
    documentVATSum (InvoiceCreditNoteDetail d) + = VATSum (invoiceDetail (d));
    documentInvoiceSum (InvoiceCreditNoteDetail d) + = invoiceSum (invoiceDetail (d));
    
    overShipmentQuantity = ABSTRACT NUMERIC [16.5] (InvoiceCreditNoteDetail);
    shipmentQuantity (InvoiceCreditNoteDetail d) + = OVERRIDE overShipmentQuantity (d), shipped (invoiceDetail (d));
    shipmentSum (InvoiceCreditNoteDetail d) = NUMERIC [18,4] (round (((OVERRIDE overShipmentQuantity (d), shipped (invoiceDetail (d))) *
                                     price (d)), currency (d)));
    shipmentSum (InvoiceCreditNoteDetail d) + = shipmentSum (d);
    shipmentVATSum (InvoiceCreditNoteDetail d) = NUMERIC [18,4] (round ((shipmentSum (d) *
                                  valueVAT (d) / 100), currency (d)));
    shipmentVATSum (InvoiceCreditNoteDetail d) + = shipmentVATSum (d);
    shipmentInvoiceSum (InvoiceCreditNoteDetail d) + = shipmentVATSum (d) (+) shipmentSum (d);
   
    quantityCredit (InvoiceDetail d) = (quantity (d) (-) shipmentQuantity (d)) IF NOT isCharge (sku (d));
    sumCredit (InvoiceDetail d) = NUMERIC [18,4] (round ((quantityCredit (d) * price (d)), currency (d)));
    VATSumCredit (InvoiceDetail d) = NUMERIC [18,4] (round ((sumCredit (d) * valueVAT (d) / 100), currency (d)));
    invoiceSumCredit (InvoiceDetail d) = VATSumCredit (d) (+) sumCredit (d);

    quantityCredit (Invoice i) = GROUP SUM quantityCredit (InvoiceDetail d) IF invoice (d) == i;
    sumCredit (Invoice i) = GROUP SUM sumCredit (InvoiceDetail d) IF invoice (d) == i;
    VATSumCredit (Invoice i) = GROUP SUM VATSumCredit (InvoiceDetail d) IF invoice (d) == i;
    invoiceSumCredit (Invoice i) = GROUP SUM invoiceSumCredit (InvoiceDetail d) IF invoice (d) == i;
       
// creditQuantity 'Quantity (taking into account the certificate)' (InvoiceDetail d) = quantity (d) (-) quantity (invoiceCreditNoteDetail (d));
// creditSum 'Amount (taking into account the deed)' (InvoiceDetail d) = sum (d) (-) sum (invoiceCreditNoteDetail (d));
// creditVATSum 'VAT amount (including the act)' (InvoiceDetail d) = VATSum (d) (-) VATSum (invoiceCreditNoteDetail (d));
// creditInvoiceSum 'Amount with VAT (including the act)' (InvoiceDetail d) = invoiceSum (d) (-) invoiceSum (invoiceCreditNoteDetail (d));
// creditQuantityInvoiceDetail 'Amount (taking into account the act)' (Invoice i) = quantityInvoiceDetail (i) (-) quantityCreditNoteDetail (invoiceCreditNote (i));
// creditSumInvoiceDetail 'Amount (taking into account the deed)' (Invoice i) = sumInvoiceDetail (i) (-) sumCreditNoteDetail (invoiceCreditNote (i));
// creditVATSumInvoiceDetail 'VAT amount (including deed)' (Invoice i) = VATSumInvoiceDetail (i) (-) VATSumCreditNoteDetail (invoiceCreditNote (i));
// creditInvoiceSumInvoiceDetail 'Amount with VAT (including deed)' (Invoice i) = invoiceSumInvoiceDetail (i) (-) invoiceSumCreditNoteDetail (invoiceCreditNote (i));
    creditQuantity 'Quantity (taking into account the certificate)' (InvoiceDetail d) = quantity (d) (-) (quantityCredit (d) IF createShipment (d));
    creditSum 'Amount (taking into account the deed)' (InvoiceDetail d) = sum (d) (-) (sumCredit (d) IF createShipment (d));
    creditVATSum 'VAT amount (taking into account the act)' (InvoiceDetail d) = VATSum (d) (-) (VATSumCredit (d) IF createShipment (d));
    creditInvoiceSum 'Amount with VAT (including deed)' (InvoiceDetail d) = invoiceSum (d) (-) (invoiceSumCredit (d) IF createShipment (d));
    
    creditQuantityInvoiceDetail 'Amount (taking into account the certificate)' (Invoice i) = quantityInvoiceDetail (i) (-) (quantityCredit (i) IF createShipment (i));
    creditSumInvoiceDetail 'Amount (taking into account the act)' (Invoice i) = sumInvoiceDetail (i) (-) (sumCredit (i) IF createShipment (i));
    creditVATSumInvoiceDetail 'VAT amount (including deed)' (Invoice i) = VATSumInvoiceDetail (i) (-) (VATSumCredit (i) IF createShipment (i));
    creditInvoiceSumInvoiceDetail 'Amount with VAT (including deed)' (Invoice i) = invoiceSumInvoiceDetail (i) (-) (invoiceSumCredit (i) IF createShipment (i));
   
    showCreditSum 'Show in the invoice' ## sign ## 'amounts taking into account the act of discrepancy' = DATA BOOLEAN ();
    backgroundCreditNote 'Color' (Invoice invoice) = RGB (255, 250, 205) IF invoice IS Invoice;
    EXTEND FORM options
        PROPERTIES () NS ### showCreditSum = showCreditSum
    ;
    
    
    DESIGN options {
        invoice ## NS {
            MOVE PROPERTY (NS ### showCreditSum);
        }
    }
    
    EXTEND FORM invoices
        PROPERTIES (i) READONLY SHOWIF showCreditSum () BACKGROUND backgroundCreditNote (i) creditQuantityInvoiceDetail, creditSumInvoiceDetail, creditVATSumInvoiceDetail, creditInvoiceSumInvoiceDetail
        PROPERTIES (d) READONLY SHOWIF showCreditSum () BACKGROUND backgroundCreditNote (i) creditQuantity, creditSum, creditVATSum, creditInvoiceSum
    ;
    EXTEND FORM userInvoice
        PROPERTIES (i) READONLY SHOWIF showCreditSum () BACKGROUND backgroundCreditNote (i) creditQuantityInvoiceDetail, creditSumInvoiceDetail, creditVATSumInvoiceDetail, creditInvoiceSumInvoiceDetail
        PROPERTIES (d) READONLY SHOWIF showCreditSum () BACKGROUND backgroundCreditNote (i) creditQuantity, creditSum, creditVATSum, creditInvoiceSum
    ;
    DESIGN userInvoice {
        headerBox {
            NEW sumBox AFTER headerParams {
                type = CONTAINERH;
                MOVE GROUP (documentSum, i);
                NEW creditNote {
                    type = CONTAINERV;
                    caption = 'Amounts subject to act';
                    MOVE PROPERTY (creditQuantityInvoiceDetail (i)) {caption = 'Amount (total)';}
                    MOVE PROPERTY (creditSumInvoiceDetail (i)) {caption = 'Amount';}
                    MOVE PROPERTY (creditVATSumInvoiceDetail (i)) {caption = 'VAT amount';}
                    MOVE PROPERTY (creditInvoiceSumInvoiceDetail (i)) {caption = 'Amount with VAT';}
                }
             
            }
        }
    }
   
END

META defineCreditNoteBatch (legalEntityProp, stockProp)
    @showDocumentInterfaceDetailBatch (creditNote);
    @defineDocumentInterfaceDetailBatch (creditNote, batch);

// EXTEND FORM userCreditNote PROPERTIES (d) nameBatch AFTER shortNameUOMSku (d);
// EXTEND FORM creditNotes PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku (d);

    batch (UserCreditNoteDetail detail)  <- batch(invoiceDetail(detail))
        WHEN CHANGED(invoiceDetail(detail));

    @defineDocumentAggregationDetailBatch (invoice, invoiceCreditNote);
    batch (InvoiceCreditNoteDetail creditNoteDetail) += batch(creditNoteDetail);
    // History by right button
    @defineBalancesBatch (creditNoteDetail); // - show the rest of the game by pressing the right key
    @defineBalancesBatch (userCreditNoteDetail); // - show the rest of the game by pressing the right key
    @defineMovementBatch (creditNoteDetail, stockProp ### stock); // - show by pressing the right key the movement in the party
    @defineMovementBatch (userCreditNoteDetail, stockProp ### stock); // - show by pressing the right key the movement in the party
    
    @defineDocumentBatchStockPriceListTypeSystemLedger (userCreditNote, stockProp);
    @extendFormDocumentBatchStock (userCreditNote, userCreditNote, c, legalEntityProp, stockProp);
END

// Games with a dialogue on warehouses
META defineCreditNoteBatchDialogStock (stockProp, dialog)

    changeBatch (UserCreditNoteDetail d) {
        DIALOG dialogBatchStock ## dialog OBJECTS
                                    st = stockProp (d),
                                    t = dateTime (d),
                                    sk = sku (d),
                                    bt = batch (d) INPUT NULL NEWSESSION DO {
            batch (d) <- bt;
        }
    }
    EXTEND FORM userCreditNote PROPERTIES (d) nameBatch ON CHANGE changeBatch (d) AFTER shortNameUOMSku (d);
    EXTEND FORM creditNotes PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku (d);
END

META defineCreditNoteBatchDialog (dumb)

    changeBatch (UserCreditNoteDetail userCreditNoteDetail) {
        DIALOG dialogBatch OBJECTS sk = sku (userCreditNoteDetail), bt = batch (userCreditNoteDetail) INPUT NULL NEWSESSION DO
            batch (userCreditNoteDetail) <- bt;
    }

    EXTEND FORM userCreditNote PROPERTIES (d) nameBatch ON CHANGE changeBatch (d) AFTER shortNameUOMSku (d);
    EXTEND FORM creditNotes PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku (d);

END

META defineCreditNotePaymentCondition (sign)

    paymentCondition 'Terms of Payment' = ABSTRACT PaymentCondition (CreditNote) MATERIALIZED;
    paymentCondition 'Payment terms' = DATA PaymentCondition (UserCreditNote);
    paymentCondition (UserCreditNote prop) + = paymentCondition (prop);

    descriptionPaymentCondition 'Terms of payment' (CreditNote prop) = description (paymentCondition (prop)) IN base CHARWIDTH 10;
    descriptionPaymentCondition 'Terms of payment' (UserCreditNote prop) = description (paymentCondition (prop)) CHARWIDTH 10;

    paymentCondition (UserCreditNote prop) <- paymentCondition (contractSku (prop))
        WHEN CHANGED (contractSku (prop));

    EXTEND FORM userCreditNote
        PROPERTIES (c) descriptionPaymentCondition
    ;

    DESIGN userCreditNote {
        GROUP (documentPrm, c) {
            MOVE PROPERTY (descriptionPaymentCondition (c));
        }
    }

END
