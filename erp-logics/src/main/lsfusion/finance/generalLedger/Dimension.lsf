MODULE Dimension;

REQUIRE GeneralLedger;

// ------------------------- GLAccountSub ---------------------- --------- //

CLASS ABSTRACT Dimension 'SubAccount';
TABLE dimension (Dimension);
name 'Name' = ABSTRACT ISTRING [255] (Dimension) CHARWIDTH 40 MATERIALIZED;

FORM dimensions 'GLAccountSub'
    OBJECTS d = Dimension
    PROPERTIES (d) READONLY objectClassName, name
    LIST Dimension OBJECT d
;

CLASS DimensionType 'Type of GLAccountSub';
TABLE dimensionType (DimensionType);

name 'Name' (DimensionType type) = staticCaption (type) IF type IS DimensionType;

id 'Identifier' = DATA STRING [20] (DimensionType) CHARWIDTH 3;
dimensionType = ABSTRACT CASE EXCLUSIVE DimensionType (Dimension) MATERIALIZED;
nameDimensionType 'GLAccountSub type' (Dimension dimension) = name (dimensionType (dimension));

TABLE GLAccountDimensionType (GLAccount, DimensionType);
order 'Ordinal number' = DATA INTEGER (GLAccount, DimensionType);
dimensionsType 'GLAccountSub' (GLAccount GLAccount) = GROUP
                                                CONCAT STRING [255] (name (DimensionType dimensionType)) IF order (GLAccount, dimensionType), ','
                                                ORDER order (GLAccount, dimensionType) CHARWIDTH 40 MATERIALIZED;

overCopy (GLAccount from, GLAccount to) + {
    order (to, DimensionType dimensionType) <- order (from, dimensionType);
}

prev (GLAccount account, DimensionType type) = PARTITION PREV type IF order (account, type)
                                                                  ORDER order (account, type) BY account;
namePrev 'Ancestor' (GLAccount account, DimensionType type) = name (prev (account, type));

TABLE generalLedgerDimensionType (GeneralLedger, DimensionType);
debit = ABSTRACT CASE EXCLUSIVE Dimension (GeneralLedger, DimensionType) MATERIALIZED INDEXED;
nameDebit 'GLAccountSub (debit)' (GeneralLedger generalLedger, DimensionType dimensionType) = name (debit (generalLedger, dimensionType));
debit = DATA Dimension (UserGeneralLedger, DimensionType) INDEXED;
nameDebit 'GLAccountSub (debit)' (UserGeneralLedger userGeneralLedger, DimensionType dimensionType) = name (debit (userGeneralLedger, dimensionType));
debit (UserGeneralLedger generalLedger, DimensionType dimensionType) + = WHEN CLASS (debit (generalLedger, dimensionType)) THEN debit (generalLedger, dimensionType);
CONSTRAINT debit (UserGeneralLedger userGeneralLedger, DimensionType dimensionType) IF NOT dimensionType (debit (userGeneralLedger, dimensionType)) == dimensionType
    CHECKED BY debit [UserGeneralLedger, DimensionType]
        MESSAGE 'Sub-account (debit) of the transaction must correspond to the sub-account';

credit = ABSTRACT CASE EXCLUSIVE Dimension (GeneralLedger, DimensionType) MATERIALIZED INDEXED;
nameCredit 'GLAccountSub (credit)' (GeneralLedger generalLedger, DimensionType dimensionType) = name (credit (generalLedger, dimensionType));
credit = DATA Dimension (UserGeneralLedger, DimensionType) INDEXED;
nameCredit 'GLAccountSub (credit)' (UserGeneralLedger userGeneralLedger, DimensionType dimensionType) = name (credit (userGeneralLedger, dimensionType));
credit (UserGeneralLedger generalLedger, DimensionType dimensionType) + = WHEN CLASS (credit (generalLedger, dimensionType)) THEN credit (generalLedger, dimensionType);
CONSTRAINT credit (UserGeneralLedger userGeneralLedger, DimensionType dimensionType) IF NOT dimensionType (credit (userGeneralLedger, dimensionType)) == dimensionType
    CHECKED BY credit [UserGeneralLedger, DimensionType]
        MESSAGE 'GLAccountSub (credit) of the posting must match the GLAccountSub';

overCopy (GeneralLedger from, UserGeneralLedger to) + {
    debit (to, DimensionType dimensionType) <- debit (from, dimensionType);
    credit (to, DimensionType dimensionType) <- credit (from, dimensionType);
}

dimensionTypeIdDimensionType (string1) = GROUP AGGR DimensionType dimensionType WHERE dimensionType IS DimensionType BY id (dimensionType);

// Select GLAccountSub

inDebit (GeneralLedger gl, d) = GROUP SUM 1 BY debit (gl, DimensionType dt);
inCredit (GeneralLedger gl, d) = GROUP SUM 1 BY credit (gl, DimensionType dt);

in (GeneralLedger gl, Dimension d) = inDebit (gl, d) OR inCredit (gl, d);

// - Counting the amounts of one GLAccountsub
TABLE GLAccountLegalEntityDDate (GLAccount, LegalEntity, Dimension, DATE);
sumCredit 'Amount (Credit)' (GLAccount, company, d1, date) = GROUP SUM
    sum (GeneralLedger ledger) IF isPosted (ledger) AND DimensionType t1 IS DimensionType
        BY credit (ledger), legalEntity (ledger), credit (ledger, t1), date (ledger); // MATERIALIZED
sumDebit 'Amount (debit)' (GLAccount, company, d1, date) = GROUP SUM
    sum (GeneralLedger ledger) IF isPosted (ledger) AND DimensionType t1 IS DimensionType
        BY debit (ledger), legalEntity (ledger), debit (ledger, t1), date (ledger); // MATERIALIZED
balance 'Balance' (GLAccount GLAccount, LegalEntity company, Dimension d1, DATE date) =
    sumDebit (GLAccount, company, d1, date) (-) sumCredit (GLAccount, company, d1, date);

sumCredit 'Amount (Credit)' (GLAccount GLAccount, LegalEntity company, Dimension d1, DATE dateFrom, DATE dateTo) = GROUP
        SUM
