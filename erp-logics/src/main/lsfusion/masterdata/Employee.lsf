MODULE Employee;

REQUIRE System, Authentication, MasterData, Security, Email, Hierarchy, Utils, Integration;

// ------------------------------------- Positions ---------- ---------------------------- //
CLASS Position 'Position';
TABLE position (Position);

@defineExternalizable (position, STRING [100]);

name 'Name' = DATA ISTRING [200] (Position);

position (employee) = DATA Position (Employee);

FORM position 'Position'
    OBJECTS of = Position PANEL
    PROPERTIES (of) name, id
    EDIT Position OBJECT of
;

FORM positions 'Positions'
    OBJECTS of = Position
    PROPERTIES (of) READONLY name, id SHOWIF showIDs ()
    PROPERTIES (of) NEWSESSION NEW, EDIT, DELETE
    LIST Position OBJECT of
;

// ------------------------------------- Access ---------- -------------------------------- //

// ------------------------------------- Staff ---------- ---------------------------- //

CLASS Employee 'Employee': CustomUser;
TABLE employee (Employee);
TABLE employeeEmployee (Employee, Employee);

@defineExternalizable (employee, STRING [100]);

initialsEmployee 'Initials (I.D.)' = DATA ISTRING [10] (Contact) CHARWIDTH 5;
shortName 'Last Name, First Name' (Contact contact) = CONCAT '', lastName (contact),
                                                        (OVERRIDE initialsEmployee (contact), firstName (contact));
firstShortName 'I.O. Surname '(Contact contact) = CONCAT' ', (OVERRIDE initialsEmployee (contact), firstName (contact)),
                                                        lastName (contact);
idPosition 'Employee employee' = id (position (employee));
namePosition 'Employee employee' = name (position (employee)) IN base CHARWIDTH 15;

positionName 'Position Full Name' (Employee employee) = CONCAT '', namePosition (employee), name [Contact] (employee) IF employee IS Employee;
positionShortName 'Position name (initials)' (Employee employee) = CONCAT '', namePosition (employee), shortName (employee) IF employee IS Employee;

limitAccess 'Restrict Access' = DATA BOOLEAN (Employee) COMPLEX;
showLimitAccess = limitAccess (Employee e) AND showIDs ();

inactive 'Inactive' = DATA BOOLEAN (Employee);
active 'Active' (Employee e) = e IS Employee AND NOT inactive (e);

notLockedEmployee 'Do not block user if login is not specified' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () notLockedEmployee
;
DESIGN options {
    commons {
        MOVE PROPERTY (notLockedEmployee ());
    }
}

WHEN SET (Employee e IS Employee AND NOT login (e)) DO {
    limitAccess (e) <- TRUE;
    IF NOT notLockedEmployee () THEN {
        isLocked (e) <- TRUE;
    }
}

FORM employee 'Employee'
    OBJECTS e = Employee PANEL
    PROPERTIES (e) objectClassName, lastName, firstName, initialsEmployee, id SHOWIF showIDs (), namePosition, login,
                  sha256Password ON CHANGE changeSHA256Password (e),
                  email, nameMainRole, limitAccess, isLocked, inactive,
                  useBusyDialogCustom, useRequestTimeout,
                  allowExcessAllocatedBytes,
                  useClientLocale, userLanguage SHOWIF NOT useClientLocale (e), userCountry SHOWIF NOT useClientLocale (e),
                  userTimeZone, userTwoDigitYearStart,
                  fontSize
    OBJECTS r = UserRole
    PROPERTIES (r) READONLY name, sid
    PROPERTIES in (e, r)
    
    EDIT Employee OBJECT e
;

DESIGN employee {
    BOX {
        size = (1024, 768);
        NEW header {
            type = CONTAINERH;
            NEW personal {
                caption = 'Personal data';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY (lastName (e));
                MOVE PROPERTY (firstName (e));
                MOVE PROPERTY (initialsEmployee (e));
                MOVE PROPERTY (id (e));
                MOVE PROPERTY (objectClassName (e)) {
                    caption = 'Type';
                }
                MOVE PROPERTY (namePosition (e));
            }
            NEW authentication {
                caption = 'User data';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY (login (e));
                MOVE PROPERTY (sha256Password (e));
                MOVE PROPERTY (email (e));
                MOVE PROPERTY (nameMainRole (e));
            }
            NEW access {
                caption = 'Access';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY (limitAccess (e));
                MOVE PROPERTY (isLocked (e));
                MOVE PROPERTY (inactive (e));
            }
        }
        NEW pane {
            fill = 1;
            type = TABBED;
            MOVE BOX (r) {
                fill = 1;
                caption = 'Additional Roles';
            }
            NEW system {
                caption = 'System Preferences';
                MOVE PROPERTY (useBusyDialogCustom (e));
                MOVE PROPERTY (useRequestTimeout (e));
                MOVE PROPERTY (allowExcessAllocatedBytes (e));
                MOVE PROPERTY (useClientLocale (e));
                MOVE PROPERTY (userLanguage (e));
                MOVE PROPERTY (userCountry (e));
                MOVE PROPERTY (userTimeZone (e));
                MOVE PROPERTY (userTwoDigitYearStart (e));
                MOVE PROPERTY (fontSize (e));
            }
        }
        MOVE TOOLBARBOX;
    }
}


overCopy ABSTRACT LIST (Employee, Employee);
copyEmployee 'Copy' (User employee) {
NEWSESSION {
NEW e = Employee {

position (e) <- position (employee);
mainRole [User] (e) <- mainRole (employee);
limitAccess (e) <- limitAccess (employee);
in (e, UserRole r) <- in (employee, r) WHERE in (employee, r);

overCopy (e, employee);

SHOW employee OBJECTS e = e DOCKED;
}
}
} TOOLBAR;

userRoles' Add. roles' (Employee e) = GROUP CONCAT name (UserRole role) IF in (e, role), ',' ORDER name (role) CHARWIDTH 15;

FORM employees 'Employees'
    PROPERTIES isEditable ()
    OBJECTS e = Employee
    PROPERTIES (e) READONLYIF isReadonly () inactive, lastName, firstName, initialsEmployee, id SHOWIF showIDs (), namePosition, shortName, login, nameMainRole, userRoles, isLocked, lastActivity
    PROPERTIES (e) NEWSESSION addE = NEW, editE = EDIT, deleteE = DELETE, copyEmployee
    
    FILTERGROUP active FILTER 'Active' active (e) 'F5' DEFAULT
;

FORM dialogEmployees 'Employees'
    OBJECTS e = Employee
    PROPERTIES (e) READONLY inactive, lastName, firstName, namePosition, nameMainRole, userRoles
    
    FILTERGROUP active FILTER 'Active' active (e) 'F5' DEFAULT
    
    LIST Employee OBJECT e
;

DESIGN dialogEmployees {
    size = (800, 600);
    PROPERTY (lastName (e)) {
        charWidth = 15;
    }
    PROPERTY (firstName (e)) {
        charWidth = 25;
    }
    PROPERTY (namePosition (e)) {
        charWidth = 30;
    }
    PROPERTY (nameMainRole (e)) {
        charWidth = 25;
    }
}

DESIGN employees {
    MOVE TOOLBARBOX {
        MOVE PROPERTY (isEditable ()) BEFORE TOOLBARRIGHT;
    }
}

NAVIGATOR {
    masterData {
        NEW employees BEFORE regionalData;
    }
}

// When creating a user, automatically make him an employee

WHEN SET (CustomUser u IS CustomUser) AND NOT u IS Employee DO {
    CHANGECLASS u TO Employee;
}
